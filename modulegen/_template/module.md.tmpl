{{ $lower := ToLower }}{{ $title := Title }}# {{ $title }}

Not available until the next release of testcontainers-go <a href="https://github.com/testcontainers/testcontainers-go"><span class="tc-version">:material-tag: main</span></a>

## Introduction

The Testcontainers module for {{ $title }}.

## Adding this module to your project dependencies

Please run the following command to add the {{ $title }} module to your Go dependencies:

```
go get github.com/testcontainers/testcontainers-go/{{ ParentDir }}/{{ $lower }}
```

## Usage example

<!--codeinclude-->
[Creating a {{ $title }} container](../../{{ ParentDir }}/{{ $lower }}/examples_test.go) inside_block:run{{ $title }}Container
<!--/codeinclude-->

## Module reference

The {{ $title }} module exposes one entrypoint function to create the {{ $title }} container, and this function receives two parameters:

```golang
func RunContainer(ctx context.Context, opts ...testcontainers.ContainerCustomizer) (*{{ $title }}Container, error)
```

- `context.Context`, the Go context.
- `testcontainers.ContainerCustomizer`, a variadic argument for passing options.

### Container Options

When starting the {{ $title }} container, you can pass options in a variadic way to configure it.

#### Image

If you need to set a different {{ $title }} Docker image, you can use `testcontainers.WithImage` with a valid Docker image
for {{ $title }}. E.g. `testcontainers.WithImage("{{ .Image }}")`.

{% include "../features/common_functional_options.md" %}

#### Startup Commands

!!!info
    Not available until the next release of testcontainers-go <a href="https://github.com/testcontainers/testcontainers-go"><span class="tc-version">:material-tag: main</span></a>

Testcontainers exposes the `WithStartupCommand(e ...Executable)` option to run arbitrary commands in the container right after it's started.

!!!info
    To better understand how this feature works, please read the [Create containers: Lifecycle Hooks](../../features/creating_container/#lifecycle-hooks) documentation.

It also exports an `Executable` interface, defining one single method: `AsCommand()`, which returns a slice of strings to represent the command and positional arguments to be executed in the container.

You could use this feature to run a custom script, or to run a command that is not supported by the module right after the {{ $title }} container is started.

### Container Methods

The {{ $title }} container exposes the following methods:
