package ollama

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/filters"
	"github.com/google/uuid"

	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/internal/core"
	"github.com/testcontainers/testcontainers-go/wait"
)

const DefaultOllamaImage = "ollama/ollama:0.1.25"

// OllamaContainer represents the Ollama container type used in the module
type OllamaContainer struct {
	testcontainers.Container
	currentImage string // used to store the current image of the container, and to commit the container
}

// ConnectionString returns the connection string for the Ollama container,
// using the default port 11434.
func (c *OllamaContainer) ConnectionString(ctx context.Context) (string, error) {
	host, err := c.Host(ctx)
	if err != nil {
		return "", err
	}

	port, err := c.MappedPort(ctx, "11434/tcp")
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("http://%s:%d", host, port.Int()), nil
}

// Commit it commits the current file system changes in the container into a new image,
// and returns the image name. The image name is generated by appending a random string
// to the tag of the current image.
// It should be used for creating an image that contains a loaded model.
func (c *OllamaContainer) Commit(ctx context.Context) (string, error) {
	cli, err := testcontainers.NewDockerClientWithOpts(context.Background())
	if err != nil {
		return "", err
	}

	lastSemicolon := strings.LastIndex(c.currentImage, ":")
	// image is the current image of the container, from the beginning of the image string to the last semicolon
	// (e.g. "ollama/ollama:0.1.25" -> "ollama/ollama")
	image := c.currentImage[:lastSemicolon]
	// tag is the tag of the target image, from the last semicolon to the end of the image string
	// (e.g. "ollama/ollama:0.1.25" -> "0.1.25")
	tag := c.currentImage[lastSemicolon+1:]

	randomString := strings.ToLower(uuid.New().String()[:4])

	targetImage := fmt.Sprintf("%s:%s-%s", image, tag, randomString)

	list, err := cli.ImageList(ctx, types.ImageListOptions{Filters: filters.NewArgs(filters.Arg("reference", targetImage))})
	if err != nil {
		return "", fmt.Errorf("listing images %w", err)
	}

	if len(list) > 0 {
		return "", fmt.Errorf("image %s already exists", targetImage)
	}

	_, err = cli.ContainerCommit(ctx, c.GetContainerID(), container.CommitOptions{
		Reference: targetImage,
		Config: &container.Config{
			Labels: map[string]string{
				core.LabelSessionID: "",
			},
		},
	})
	if err != nil {
		return "", fmt.Errorf("committing container %w", err)
	}

	return targetImage, nil
}

// RunContainer creates an instance of the Ollama container type
func RunContainer(ctx context.Context, opts ...testcontainers.ContainerCustomizer) (*OllamaContainer, error) {
	req := testcontainers.ContainerRequest{
		Image:        DefaultOllamaImage,
		ExposedPorts: []string{"11434/tcp"},
		WaitingFor:   wait.ForListeningPort("11434/tcp").WithStartupTimeout(60 * time.Second),
	}

	genericContainerReq := testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	}

	// always request a GPU if the host supports it
	opts = append(opts, withGpu())

	for _, opt := range opts {
		opt.Customize(&genericContainerReq)
	}

	container, err := testcontainers.GenericContainer(ctx, genericContainerReq)
	if err != nil {
		return nil, err
	}

	return &OllamaContainer{Container: container, currentImage: DefaultOllamaImage}, nil
}
