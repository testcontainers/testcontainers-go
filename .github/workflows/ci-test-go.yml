name: Run tests for a Go project
run-name: "${{ inputs.project-directory }} ${{ inputs.go-version }} ${{ inputs.platform }}"

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
        description: "The version of Go to use for the test."
      platform:
        required: true
        type: string
        description: "The platform to run the test on."
      fail-fast:
        required: false
        type: boolean
        default: true
        description: "Fail the workflow if any of the jobs fail."
      project-directory:
        required: true
        type: string
        default: "."
        description: "The directory where the Go project is located."
      rootless-docker:
        required: false
        type: boolean
        default: false
        description: "Run the test with rootless docker."
      run-tests:
        required: false
        type: boolean
        default: true
        description: "Run the tests under conditions controlled by the caller workflow."
      ryuk-disabled:
        required: false
        type: boolean
        default: false
        description: "Disable the ryuk container for the test."

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  test-go-project:
    name: "${{ inputs.project-directory }}/${{ inputs.platform }}/${{ inputs.go-version }}"
    runs-on: ${{ inputs.platform }}
    continue-on-error: ${{ !inputs.fail-fast }}
    env:
      TESTCONTAINERS_RYUK_DISABLED: "${{ inputs.ryuk-disabled }}"
      RYUK_CONNECTION_TIMEOUT: "${{ inputs.project-directory == 'modules/compose' && '5m' || '60s' }}"
      RYUK_RECONNECTION_TIMEOUT: "${{ inputs.project-directory == 'modules/compose' && '30s' || '10s' }}"
    steps:
      - name: Setup rootless Docker
        if: ${{ inputs.rootless-docker }}
        uses: ScribeMD/rootless-docker@6bd157a512c2fafa4e0243a8aa87d964eb890886  # v0.2.2

      - name: Remove Docker root socket
        if: ${{ inputs.rootless-docker }}
        run: sudo rm -rf /var/run/docker.sock

      - name: Check out code into the Go module directory
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
            go-version: '${{ inputs.go-version }}'
            cache-dependency-path: '${{ inputs.project-directory }}/go.sum'
        id: go

      - name: golangci-lint
        if: ${{ inputs.platform == 'ubuntu-latest' }}
        uses: golangci/golangci-lint-action@9d1e0624a798bb64f6c3cea93db47765312263dc # v5
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.59.1
          # Optional: working directory, useful for monorepos
          working-directory: ${{ inputs.project-directory }}
          # Optional: golangci-lint command line arguments.
          args: --verbose
          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          skip-cache: true

      - name: generate
        if: ${{ inputs.platform == 'ubuntu-latest' }}
        working-directory: ./${{ inputs.project-directory }}
        shell: bash
        run: |
          make generate
          git --no-pager diff && [[ 0 -eq $(git status --porcelain | wc -l) ]]

      - name: modVerify
        working-directory: ./${{ inputs.project-directory }}
        run: go mod verify

      - name: modTidy
        if: ${{ inputs.platform == 'ubuntu-latest' }}
        working-directory: ./${{ inputs.project-directory }}
        shell: bash
        run: |
          make tidy
          git --no-pager diff && [[ 0 -eq $(git status --porcelain | wc -l) ]]

      - name: ensure compilation
        working-directory: ./${{ inputs.project-directory }}
        run: go build

      - name: go test
        # only run tests on linux, there are a number of things that won't allow the tests to run on anything else
        # many (maybe, all?) images used can only be build on Linux, they don't have Windows in their manifest, and
        # we can't put Windows Server in "Linux Mode" in Github actions
        # another, host mode is only available on Linux, and we have tests around that, do we skip them?
        if: ${{ inputs.run-tests }}
        working-directory: ./${{ inputs.project-directory }}
        timeout-minutes: 30
        run: make test-unit

      - name: Upload SonarCloud files
        if: ${{ github.ref_name == 'main' && github.repository_owner == 'testcontainers' && inputs.run-tests && !inputs.rootless-docker }}
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: sonarcloud
          path: |
            ./sonar-project.properties
            ${{ inputs.project-directory }}/TEST-unit.xml
            ${{ inputs.project-directory }}/coverage.out

      - name: Run checker
        run: |
            ./scripts/check_environment.sh

      - name: Test Summary
        uses: test-summary/action@032c8a9cec6aaa3c20228112cae6ca10a3b29336 # v2.3
        with:
            paths: "**/${{ inputs.project-directory }}/TEST-unit*.xml"
        if: always()
