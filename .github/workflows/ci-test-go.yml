name: Run tests for a Go project
run-name: "${{ inputs.project-directory }} ${{ inputs.go-version }} ${{ inputs.platforms }}"

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
        description: "The version of Go to use for the test."
      platforms:
        required: true
        type: string
        default: "ubuntu-latest"
        description: "The platforms in which the project will be run"
      project-directory:
        required: true
        type: string
        default: "."
        description: "The directory where the Go project is located."
      rootless-docker:
        required: false
        type: boolean
        default: false
        description: "Run the test with rootless docker."
      ryuk-disabled:
        required: false
        type: boolean
        default: false
        description: "Disable the ryuk container for the test."

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  test-go-project:
    name: "test: ${{ inputs.project-directory }}/${{ inputs.go-version }}"
    # Modulegen can run the tests on all platforms
    env:
      TESTCONTAINERS_RYUK_DISABLED: "${{ inputs.ryuk-disabled }}"
      RYUK_CONNECTION_TIMEOUT: "${{ inputs.project-directory == 'modules/compose' && '5m' || '60s' }}"
      RYUK_RECONNECTION_TIMEOUT: "${{ inputs.project-directory == 'modules/compose' && '30s' || '10s' }}"
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Setup rootless Docker
        if: ${{ inputs.rootless-docker }}
        uses: docker/setup-docker-action@c2d73c1a11a9b44be6d855121d75c3e0dac814c1 # v4
        with:
          rootless: true

      - name: Check out code into the Go module directory
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
            go-version: '${{ inputs.go-version }}'
            cache-dependency-path: '${{ inputs.project-directory }}/go.sum'
        id: go

      - name: ensure compilation
        working-directory: ./${{ inputs.project-directory }}
        run: go build

      - name: Install dependencies
        shell: bash
        run: |
          SCRIPT_PATH="./.github/scripts/${{ inputs.project-directory }}/install-dependencies.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            $SCRIPT_PATH
          else
            echo "No dependencies script found at $SCRIPT_PATH - skipping installation"
          fi

      - name: go test
        working-directory: ./${{ inputs.project-directory }}
        timeout-minutes: 30
        run: make test-unit

      - name: Run checker
        run: |
            ./scripts/check_environment.sh

      - name: Test Summary
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2.4
        with:
            paths: "**/${{ inputs.project-directory }}/TEST-unit*.xml"
        if: always()

      - name: Set Sonar Cloud environment variables
        if: ${{ !inputs.rootless-docker && !inputs.ryuk-disabled && github.ref_name == 'main' && github.repository_owner == 'testcontainers' }}
        run: |
          echo "PROJECT_VERSION=$(grep 'latest_version' mkdocs.yml | cut -d':' -f2 | tr -d ' ')" >> $GITHUB_ENV
          if [ "${{ inputs.project-directory }}" == "" ]; then
            echo "PROJECT_KEY=testcontainers_testcontainers-go" >> $GITHUB_ENV
            echo "PROJECT_NAME=testcontainers-go" >> $GITHUB_ENV
          else
            echo "PROJECT_KEY=testcontainers_testcontainers-go_$(echo ${{ inputs.project-directory }} | tr '/' '_')" >> $GITHUB_ENV
            echo "PROJECT_NAME=testcontainers-go-$(echo ${{ inputs.project-directory }} | tr '/' '-')" >> $GITHUB_ENV
          fi

      - name: SonarQube Scan
        if: ${{ !inputs.rootless-docker && !inputs.ryuk-disabled && github.ref_name == 'main' && github.repository_owner == 'testcontainers' }}
        uses: SonarSource/sonarqube-scan-action@0303d6b62e310685c0e34d0b9cde218036885c4d # v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: "${{ inputs.project-directory == '' && '.' || inputs.project-directory }}"
          args: >
            -Dsonar.organization=testcontainers
            -Dsonar.projectKey=${{ env.PROJECT_KEY }}
            -Dsonar.projectName=${{ env.PROJECT_NAME }}
            -Dsonar.projectVersion=${{ env.PROJECT_VERSION }}
            -Dsonar.project.monorepo.enabled=true
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.test.exclusions=**/vendor/**
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.go.tests.reportPaths=TEST-unit.xml
